APP LOGIC - LPC
1. IN THE DATABASE, THE APP WILL ONLY STORE NODE ID AND PUBLISHED DATE INCLUDING TIME. THE NODE IDS WILL BE SORTED ACCORDING TO THEIR DATES/TIMES. THIS WAY, WHEN QUERIED FOR, THE INFORMATION RETURNED SHOULD HAVE ALREADY BEEN LISTED CHRONOLOGICALLY.
1.1. IS THE NODE ID ALSO TRACKED BY GOOGLE ANALYTICS?
1.1.1. IF IT IS, IS THERE A WAY, USING GOOGLE ANALYTICS API OR NOT, A WAY I CAN RETRIEVE GA DATA FOR THE STORIES USING NODE IDS?
1.1.2. SHADRACH JAUNGERE HAS FOUND A WAY TO BY PASS GOOGLES YOUTUBE SECURITY, GET ADVISE FROM HIM ON HOW TO WORK WITH GOOGLE WITHOUT USING AN API/MIDDLEWARE FRAMEWORK.

2. WHEN A USER REQUESTS FOR STORIES BETWEEN SPECIFIC DATES, THE DATABASE WILL BE QUERIED AND THE INFORMATION CONTAINED WITHIN THE RETURNED ARRAY WILL BE LISTED IN A TABLE. THE REST OF THE DATA WILL BE POPULATED AUTOMATICALLY USING ANGULARJS. THE CONCEPT THAT IS SIMILAR TO THE APPLICATIONS DEEPLINK FEATURE.
2.1. CAN THIS INFORMATION RETRIEVED BY ANGULARJS BE PASSED ON TO STORE IN THE DATABASE? MAKING USE OF THE "STORE WHAT YOU QUERY FOR" MONGODB PRINCIPLE???
2.1.1. IF THIS WORKS, THEN WHEN THE DATA IS QUERIED LATER ON, ANGULARJS CAN ONLY RETRIEVE AN UPDATED COUNT OF THE PAGEVIEWS AND UPDATE THE DOCUMENT IN THE DATABASE.

PROS - LPC FEATURE UPGRADE
1. REDUCES THE AMMOUNT OF SPACE USED BY THE APP TO STORE DATA. SINCE I AM USING A FREE MONGOLAB DATABASE, SPACE IS AN ISSUE THEREFORE THIS APPROACH WILL HELP ME OUT A LOT.
2. THIS DOES NOT MAKE USE OF THE "STORE WHAT YOU QUERY FOR" MONGODB PRINCIPLE. IN A NUTSHELL, THE APPLICATIONS SUPPOSED TO STORE NODEID, DATE PUBLISHED, AUTHOR, CATEGORY, DESCRIPTION, PAGEVIEWS AND COMMENTS BUT IT DOES NOT.
3. IT MAY LEAD TO PRODUCING "CON" TRAFFIC. THIS MAY GREATLY INCREASE BOUNCE RATE AS EACH REQUEST TO THE WEBSITE IS ONLY SHORTLIVED.
3.1. CHECK AND CONFIRM THIS WITH GOOGLE ANALYTICS.

CONS - LPC FEATURE UPGRADE
1. THIS IS THE IDEAL SOLUTION. THERE IS NO OTHER WAY IN DOING THIS.
2. 